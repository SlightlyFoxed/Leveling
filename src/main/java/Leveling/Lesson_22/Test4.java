package Leveling.Lesson_22;

public class Test4 {
}
class Human2 {
    //Human2 (){};//Дефолтный конструктор класса Human2. и в нем в свою очередь вызовется конструктор Object. Как только конструктор Object закончит работу,
    //после него закончит работу конструктор Human2, после этого закончит работу конструктор Student2, и только тогда создастся объект s класса Student2
    Human2(String n){
        this(n,null);
    }
    Human2(String n,String s){
        name = n;
        surname = s;
    }

     String name;
     String surname;

}
class Student2 extends Human2 {
    /*Student2() {//Но когда создается объект сабкласса, то вызывается соответствующий конструктор
        // и внутри соответствующего конструктора создается конструктор parent(родительского) класса, даже если в теле конструктора ничего не писать
        super();//Он вызывается с помощью ключевого слова super.Аналог ключевого слова this которым вызывался overloaded конструктор того же класса,
        //Так и в этом случае с помощью ключевого слова super вызывается конструктор суперкласса
        //И перед тем как конструктор сабкласса закончит свою работу, сначала закончит работу конструктор суперкласса
    }*/
    Student2 (){
        this(5);
    }
    Student2(int i){//Чтобы не было ошибки компилятора при создании в суперклассе не дефолтного конструктора, в конструкторе субкласса необходимо
        // обращаться к конструктору суперкласса с соответствующим параметром или параметрами
        super("Petya");
    }
    public static void main(String[] args) {
        Student2 s = new Student2();//Создается объект Student2 (это значит что создается дефолтный конструктор)
        //Для создания этого объекта происходит следующая цепочка:
        //Создается объект Student2, который обращается к конструктору без параметров.Тот обращается к конструктору с параметром int.
        // он обращается к конструктору суперкласса Human2 с параметром String, он в свою очередь обращается к конструктору Human2 с двумя параметрами,
        // а он обращается к дефолтному конструктору класса прародителя Object.
        // Как только он завершает работу, в обратном порядке конструкторы тоже завершают работу
        //Как только последний конструктор завершит работу, создастся объект Student2 s

    }
}