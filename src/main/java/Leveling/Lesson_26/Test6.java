package Leveling.Lesson_26;

public class Test6 {
    int a = 3;

    Test6() {
        a = 4;
    }

    {
        a = 5;
    }

    /*public static void main(String[] args) {
        Test6 t = new Test6();
        System.out.println(t.a);//Сначала переменная а принимает значение 3, затем инициализатор меняет ее значение на 5, затем конструктор меняет на 4.
    }*/
}

class A {
    static final int b;

    static {
        b = 10;
    }//Назначить значение статической константе можно в инициализаторе, так как он сработает до создания объекта
    //В статических инициализаторах нельзя обращаться к не статическим переменным.Только не в статических
}

class B {
    static int c;
    static final int d;
    static final int e = 1;
    static final int f;

    static {
        c = 5;
        d = 3;
        //e = 2; //Так как переменная _е_ константа которой уже присвоили значение, изменять в инициализаторе ее нельзя.
        f = 0;
    }
}

class C {
    String s = "ok";

    {System.out.println(s);}

    static int i = 0;

    static {System.out.println(i);}

    {i = i + 1;System.out.println(i);}

    C() {
        System.out.println("Eto konstruktor");
    }

    public static void main(String[] args) {
        System.out.println("Privet vsem");//Эта строка срабатывает сразу после статического инициализатора
        C c = new C();
    }
}
class D{
    static {abc(2);}//Первым выполняется статический инициализатор 2
    static void abc (int a){
        System.out.println(a + " ");
    }
    D(){abc(5);}//Последним срабатывает конструктор D 5
    static {abc(4);}//Вторым выполняется второй статический инициализатор 4
    {abc(6);}//выполняется не статический инициализатор 6
    static {new D();}//В третьем статическом инициализаторе создается новый объект. Начинают выполняться все не статические инициализаторы
    {abc(8);}//выполняется не статический инициализатор 8

    public static void main(String[] args) {
//При том, что в главном методе ничего не написано, создается объект и методы работают в порядке 2.4.6.8.5
    }
}
//Последовательность инициализации initializer блоков и переменных:
//1. Статические блоки и переменные родительского класса
//2. Статические блоки и переменные дочернего класса
//3. Не статические блоки и переменные родительского класса
//4. Конструктор родительского класса
//5. Не статические блоки и переменные дочернего класса
//6. Конструктор дочернего класса
//Инициализация пунктов 3-6 происходит только и при каждом создании объекта